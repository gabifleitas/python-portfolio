# -*- coding: utf-8 -*-
"""Sprint 3: Manipulación de datos (Data Wrangling)

Automatically generated by Colab.

The original file is located on Google Drive
    

# **Proyecto Tripleten de limpieza de datos**
Tripleten nos pidió analizar una hipótesis: La actividad de los usuarios y las usuarias difiere según el día de la semana y dependiendo de la ciudad.

Luego de la hipótesis, haré unos insights personales.
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
df = pd.read_csv('/content/drive/My Drive/***.csv')

print(df.head(10))

# Obtener la información general sobre nuestros datos
df.info()

# Muestra los nombres de las columnas
print(df.columns)

# Bucle en los encabezados poniendo todo en minúsculas
new_col_name=[]
for name in df.columns:
    name_low=name.lower()
    new_col_name.append(name_low)

df.columns = new_col_name
print(df.columns)

# Bucle en los encabezados eliminando los espacios
new_name=[]
for name in df.columns:
    name_low=name.lower()
    name_stripped = name_low.strip()
    new_name.append(name_stripped )

df.columns = new_name
print(df.columns)

new_name_col = []

for name in df.columns:
    name_low = name.lower()  # Convertir a minúsculas
    name_stripped = name_low.strip()  # Quitar espacios adicionales

    # Cambiar 'userid' a 'user_id', mantener el resto igual
    if name_stripped == "userid":
        new_name_col.append("user_id")
    else:
        new_name_col.append(name_stripped)

df.columns = new_name_col  # Asignar los nuevos nombres de columna
print(df.columns)
print(df.head())

# Comprobar el resultado: la lista de encabezados
print(df.columns)

# Calcular el número de valores ausentes
print(df.isna().sum())
print()
print(df.isnull().sum())

# Bucle en los encabezados reemplazando los valores ausentes con 'unknown'
fill_value=['track','artist','genre']

for col in fill_value:
    df[col].fillna('unknown',inplace=True)

print(df.isna().sum())

# Contar duplicados explícitos
print(df.duplicated().sum())
print()
print(df.value_counts())

# Eliminar duplicados explícitos
df.drop_duplicates(inplace=True)

# Comprobar de nuevo si hay duplicados
print(df.duplicated().sum())

# Inspeccionar los nombres de géneros únicos
print(df['genre'].unique())

# Función para reemplazar duplicados implícitos
def replace_wrong_genres(wrong_genres,correct_genre):
    for wrong_value in wrong_genres:
        df['genre'] = df['genre'].replace(wrong_value, correct_genre)
    return df

duplicates = ['hip','hop','hip-hop']
correct = 'hiphop'

try_now = replace_wrong_genres(duplicates,correct)
print(try_now)

# Eliminar duplicados implícitos
try_now = replace_wrong_genres(duplicates,correct)
print(try_now)

# Comprobación de duplicados implícitos
print(df['genre'].unique())

# Contar las canciones reproducidas en cada ciudad
print(df.groupby('city')['genre'].count())
print()
print(df.groupby('city')['time'].count())

# Calcular las canciones reproducidas en cada uno de los tres días
print(df.groupby('day')['genre'].count())
print()
print(df.groupby('day')['time'].count())

#declarar función que nos permita filtrar
def number_tracks(day,city):
    df_filtered = df[df['day'] == day]
    df_filtered = df_filtered[df_filtered['city']==city]
    numero_personas=df_filtered['user_id'].count()
    return numero_personas

# El número de canciones reproducidas en Springfield el lunes
print(number_tracks('Monday','Springfield'))

# El número de canciones reproducidas en Shelbyville el lunes
print(number_tracks('Monday','Shelbyville'))

# El número de canciones reproducidas en Springfield el miércoles
print(number_tracks('Wednesday','Springfield'))

# El número de canciones reproducidas en Shelbyville el miércoles
print(number_tracks('Wednesday','Shelbyville'))

# El número de canciones reproducidas en Springfield el viernes
print(number_tracks('Friday','Springfield'))

# El número de canciones reproducidas en Shelbyville el viernes
print(number_tracks('Friday','Shelbyville'))

"""En base a los datos que tenemos (que son estáticos, así también en caso de haber tenido más datos hubiera sido diferente) la hipotesis se acepta por completo. Los datos muestran que efectivamente.

# **Mis insights**
"""

print(df.groupby('day')['artist'].count())

artist_counts = df['artist'].value_counts()

# quien fue el artista más escuchado
most_listened = artist_counts.head(1)

# top 5 artistas
top_5_artists = artist_counts.head()

print(most_listened)
print()
print(top_5_artists)

songs_counts = df['track'].value_counts()

# quien fue el artista más escuchado
most_listened_song = songs_counts.head(1)

# top 5 artistas
top_5_songs = songs_counts.head()

print(most_listened_song)
print()
print(top_5_songs)

"""**Según los resultados, tanto el artista más escuchado como la canción más escuchada son "unknown". Recordemos que más arriba en el código decidimos poner unknown en las secciones faltantes.
Por lo tanto, "unknown" puede ser 1 o más artistas así como 1 o más canciones.**
"""